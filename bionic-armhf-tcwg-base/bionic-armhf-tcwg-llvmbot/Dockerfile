# Auto generated by ./tcwg-base/generate-dockerfiles.sh from tcwg-base/tcwg-llvmbot/Dockerfile.in. Do not edit.
FROM linaro/ci-armhf-tcwg-base-ubuntu:bionic

RUN apt-get update \
 && DEBIAN_FRONTEND=noninteractive apt-get install -y \
 software-properties-common

# Add the toolchain test build PPA which provides gcc-9 for bionic
# (the add-apt-repository is installed by software-properties-common)
RUN add-apt-repository -y ppa:ubuntu-toolchain-r/test

# Add archive signatures for LLVM apt repository.
RUN wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key|apt-key add - \
 && apt-add-repository "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-11 main"

RUN echo "deb https://apt.buildkite.com/buildkite-agent stable main" | tee /etc/apt/sources.list.d/buildkite-agent.list \
 && apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 32A37959C2FA5C3C99EFBC32A79206696452D198

RUN apt-get update \
 && DEBIAN_FRONTEND=noninteractive apt-get install -y \
 binutils-gold \
 buildkite-agent \
 cpio \
 g++-9 \
 gcc-10 \
 g++-10 \
 gfortran \
 htop \
 iotop \
 libedit-dev \
 libjson-perl \
 libtinfo-dev \
# We build clang+llvm releases on Ubuntu Bionic, which has libtinfo.so.5,
# and we link against it.
# Ubuntu Focal by default installs libtinfo6 (aka libtinfo.so.6), and
# our clang+llvm releases don't work on Ubuntu Focal unless we install
# legacy libtinfo5 (aka libtinfo.so.5).
# We should no longer need libtinfo5 when we switch building releases to
# Ubuntu Focal or later.
 libtinfo5 \
 libxml2-dev \
 linux-tools-common \
 python-dev \
 python-pip \
 python-setuptools \
 python-wheel \
 python3-buildbot-worker \
 tmux \
 && update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 800 \
 --slave /usr/bin/g++ g++ /usr/bin/g++-9 \
 && apt-get clean \
 && rm -rf \
 /var/lib/apt/lists/* \
 /tmp/* \
 /var/tmp/*

# Add ninja with support for memory-threshold job limitation.
# It's installed with ".bin" extension and containers then
# make wrappers around it in /usr/local/bin/ninja as needed.
#
# Throttle ninja on system load, system memory and container memory
# limits.
#
# Make ninja run single-threaded if
# - average load is more than the number of cores,
# - system or container memory utilization is beyond 50% (-m 50 -M 50).
# Make ninja stall for up to 5 seconds (-D 5000) before starting
# a new job when usage decreases under threshold (to avoid rapid
# increase of resource usage from N_CORES-1 new processes).
RUN git clone -b master https://github.com/maxim-kuvyrkov/ninja.git \
 && cd ninja \
 && ./configure.py --bootstrap && ./ninja all && ./ninja_test \
 && mv ninja /usr/local/bin/ninja.bin \
 && cd .. \
 && rm -rf ninja \
 && echo \
   $'#!/bin/sh\n' \
   $'exec /usr/local/bin/ninja.bin -l$(nproc --all) -D 5000 "$@"' \
   > /usr/local/bin/ninja \
 && chmod +x /usr/local/bin/ninja

RUN new-user.sh --user tcwg-buildslave \
 # Allow non root users to access the buildkite config files
 && chmod -R a+rw /etc/buildkite-agent/

# Add a recent clang for libcxx bots, because they build and test the libraries
# using the latest C++ standard, which might not be supported by the system
# compiler.
RUN \
 clang_ver=clang+llvm-10.0.1-armv7a-linux-gnueabihf \
 && cd /usr/local \
 && wget --progress=dot:giga https://github.com/llvm/llvm-project/releases/download/llvmorg-10.0.1/$clang_ver.tar.xz \
 && tar xf $clang_ver.tar.xz \
 && rm $clang_ver.tar.xz

# Add the latest clang (11.1.0) for flang bot.
RUN \
 clang_ver=clang+llvm-11.1.0-armv7a-linux-gnueabihf \
 && cd /usr/local \
 && wget --progress=dot:giga https://github.com/llvm/llvm-project/releases/download/llvmorg-11.1.0/$clang_ver.tar.xz \
 && tar xf $clang_ver.tar.xz \
 && rm $clang_ver.tar.xz

VOLUME /home

COPY run.sh .
COPY start.sh .

ENTRYPOINT ["linux32", "/run.sh"]
CMD ["start.sh"]
# checksum: adc9ca8355a16346c9c18ba8114ed50e
