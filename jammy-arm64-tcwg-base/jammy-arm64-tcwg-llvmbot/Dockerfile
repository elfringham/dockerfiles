# Auto generated by ./tcwg-base/generate-dockerfiles.sh from tcwg-base/tcwg-llvmbot/Dockerfile.in. Do not edit.
FROM linaro/ci-arm64-tcwg-base-ubuntu:jammy
RUN echo "deb https://apt.buildkite.com/buildkite-agent stable main" | tee /etc/apt/sources.list.d/buildkite-agent.list \
 && apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 32A37959C2FA5C3C99EFBC32A79206696452D198
RUN apt-get update \
 && DEBIAN_FRONTEND=noninteractive apt-get install -y \
 binutils-gold \
 buildkite-agent \
 cpio \
 gfortran \
 htop \
 iotop \
# Add locales used for testing libcxx
 language-pack-en \
 language-pack-fr \
 language-pack-ja \
 language-pack-ru \
 language-pack-zh-hans \
 libedit-dev \
 libjson-perl \
 libtinfo-dev \
# We build clang+llvm releases on Ubuntu Bionic, which has libtinfo.so.5,
# and we link against it.
# Ubuntu Focal by default installs libtinfo6 (aka libtinfo.so.6), and
# our clang+llvm releases don't work on Ubuntu Focal unless we install
# legacy libtinfo5 (aka libtinfo.so.5).
# We should no longer need libtinfo5 when we switch building releases to
# Ubuntu Focal or later.
 libtinfo5 \
 libxml2-dev \
 linux-tools-common \
 python3-buildbot-worker \
 tmux \
# uuidgen is used by the flang driver script. Not installed by default on focal.
 uuid-runtime \
# Although the base image has python3-venv installed, this does not give
# you 'virtualenv'. Instead you must do 'python3 -m venv'. However the test
# suite calls virtualenv with --python=python3, so we're ok to use the Python2
# version here.
 virtualenv \
 && apt-get clean \
 && rm -rf \
 /var/lib/apt/lists/* \
 /tmp/* \
 /var/tmp/*
# Libcxx needs some locales that are not generated by default
RUN printf "fr_CA ISO-8859-1\ncs_CZ ISO-8859-2" >> /etc/locale.gen \
  && mkdir /usr/local/share/i1en/ \
  && printf "fr_CA ISO-8859-1\ncs_CZ ISO-8859-2" >> /usr/local/share/i1en/SUPPORTED \
  && locale-gen
# Add ninja with support for matching concurrency to available CPU allowance.
# It's installed with ".bin" extension and we then make a wrapper around it.
RUN git clone -b limit-on-cpu https://github.com/maxim-kuvyrkov/ninja.git \
 && cd ninja \
 && python3 ./configure.py --bootstrap && ./ninja all && ./ninja_test \
 && mv ninja /usr/local/bin/ninja.bin \
 && cd .. \
 && rm -rf ninja \
 && echo \
   $'#!/bin/sh\n' \
   $'exec /usr/local/bin/ninja.bin -l-10 "$@"' \
   > /usr/local/bin/ninja \
 && chmod +x /usr/local/bin/ninja
RUN new-user.sh --user tcwg-buildbot \
 # Initialize .ccache dir, so that we mount ccache docker volumes with
 # correct permissions.
 && sudo -i -u tcwg-buildbot mkdir -p /home/tcwg-buildbot/.ccache \
 # Allow non root users to access the buildkite config files
 && chmod -R a+rw /etc/buildkite-agent/
# Add the latest clang (14.0.5)
RUN \
 clang_ver=clang+llvm-14.0.5-aarch64-linux-gnu \
 && cd /usr/local \
 && wget --progress=dot:giga https://github.com/llvm/llvm-project/releases/download/llvmorg-14.0.5/$clang_ver.tar.xz \
 && tar xf $clang_ver.tar.xz \
 && rm $clang_ver.tar.xz
# Add libpgmath, which is used by flang
RUN git clone https://github.com/rovka/libpgmath-binaries.git \
 && mv libpgmath-binaries/* /usr/local/lib/ \
 && rm -rf libpgmath-binaries
# Add cmake 3.24, which has support for flang
RUN wget https://github.com/Kitware/CMake/releases/download/v3.24.0-rc4/cmake-3.24.0-rc4-linux-aarch64.sh \
 && chmod +x cmake-3.24.0-rc4-linux-aarch64.sh \
 && ./cmake-3.24.0-rc4-linux-aarch64.sh --prefix=/usr/local --skip-license
VOLUME /home
COPY run.sh .
COPY start.sh .
ENTRYPOINT ["/run.sh"]
CMD ["start.sh"]
# checksum: d3c5df99b652a7467368f1a6c8d75e45
