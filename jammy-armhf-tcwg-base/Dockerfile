# Auto generated by ./generate-dockerfiles.sh from tcwg-base/Dockerfile.in. Do not edit.
FROM arm32v7/ubuntu:jammy
# Use bash for better string escaping (on Ubuntu, /bin/sh is dash).
SHELL ["/bin/bash", "-c"]
# Unminimize Ubuntu to install contrib files of git (after package
# update, otherwise unminimize's "apt upgrade" might fail).
RUN apt-get update \
 && DEBIAN_FRONTEND=noninteractive apt-get dist-upgrade -y \
 && echo y | unminimize \
 && DEBIAN_FRONTEND=noninteractive apt-get install -y devscripts \
 && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
 alien \
 autoconf \
 autogen \
 automake \
 bc \
 bind9-host \
 bison \
 binutils-dev \
 bsd-mailx \
 build-essential \
 byacc \
 ccache \
 ccrypt \
 chrpath \
 clang \
 cmake \
 curl \
 debhelper \
 default-jre \
 dejagnu \
 dh-autoreconf \
 dh-translations \
 distro-info-data \
 emacs \
 fakeroot \
 flex \
 fp-compiler \
 gawk \
 gdc \
 gdb \
 gdbserver \
 gfortran \
 git \
 # Modula 2 compiler only available on Focal.
 gm2 \
 gnat \
 gobjc \
 gobjc++ \
 golang \
 groff \
 # Focal onwards has guile-3.0.
 guile-3.0 \
 guile-3.0-dev \
 less \
 libcc1-0 \
 libexpat1-dev \
 libffi-dev \
 libglib2.0-dev \
 libgmp-dev \
 liblzma-dev \
 libmpc-dev \
 libmpfr-dev \
 libncurses5-dev \
 libpixman-1-dev \
 libpython3-dev \
 libreadline-dev \
 libssl-dev \
 libtcnative-1 \
# Our bionic built llvm releases expect to find this but
# focal installs libtinfo6 instead.
 libtinfo5 \
 libtool \
 locales \
 lzop \
 make \
 moreutils \
 net-tools \
 netcat \
 nfs-kernel-server \
 ninja-build \
 ntp \
 openssh-server \
 pkg-config \
 postfix \
 psmisc \
 python3-dev \
 python3-pip \
 python3-setuptools \
 python3-venv \
 python3-wheel \
 python3-pandas \
 rsync \
# For Bionic -- jipdate Python package uses jira, which uses cryptography,
# which needs rust to build. The apt versions of the dependencies
# are too old to work and Bionic's pip doesn't recognise the
# prebuilt wheels as compatible.
# For armhf -- cryptography's build process detects architecture
# as armv8l, so armv7l wheels are not used and we need to build
# armv8l ones.
 rustc \
 cargo \
 subversion \
 sudo \
 swig \
 tclsh \
 texinfo \
 texlive-fonts-recommended \
 texlive-latex-recommended \
 time \
 unifdef \
 valgrind \
 vim \
 wget \
 xz-utils \
 zip \
 zlib1g-dev \
 shellcheck \
# Update tzdata, because some base images have an incorrect file for UTC.
 && DEBIAN_FRONTEND=noninteractive apt-get install --reinstall tzdata \
 && rm -f /etc/ssh/ssh_host_*_key* \
 && apt-get clean \
 && rm -rf \
 /var/lib/apt/lists/* \
 /tmp/* \
 /var/tmp/*
RUN install -D -p -m0755 /usr/share/doc/git/contrib/workdir/git-new-workdir /usr/local/bin/git-new-workdir \
 && sed -i -e 's:^session *required *pam_loginuid.so:# session required pam_loginuid.so:' /etc/pam.d/sshd \
 && mkdir -p /var/run/sshd \
 && sed -i \
 -e "/.*MaxStartups.*/d" \
 -e "/.*MaxSessions.*/d" /etc/ssh/sshd_config \
 && echo "MaxStartups 256" >> /etc/ssh/sshd_config \
 && echo "MaxSessions 256" >> /etc/ssh/sshd_config \
 && locale-gen en_US.UTF-8 && update-locale LANG=en_US.UTF-8 \
 && pip3 install git-review \
 && pip3 install psutil
# Install jipdate.
RUN git clone -b master https://github.com/Linaro/jipdate.git /usr/local/jipdate/ \
# Run pip3 under linux32 for armhf so that requirements are built
# for armv8l, not for aarch64, which would fail.
 && linux32 pip3 install -U -r /usr/local/jipdate/requirements.txt \
 && ln -s /usr/local/jipdate/jipdate.py /usr/local/bin/jipdate.py
COPY postfix-main.cf.in /etc/postfix/main.cf
COPY postfix-sasl_password.in /etc/postfix/sasl_password
RUN chown root:root /etc/postfix/sasl_password \
 && chmod 600 /etc/postfix/sasl_password
# Configure linux tools for benchmarking support.
#
# We symlink linux tools to supportted "hw_tags":
#   apm_32, apm_64, sq_32, sq_64, tk1_32, tx1_32, tx1_64.
# HW_TAGS represent tested configurations of hardware+kernel+perf that
# work well together.  We create new hw_tag for any variation in hardware,
# kernel, or perf.  This gives us assurance that benchmarking data stored
# under bkp-01.tcwglab:results-<HW_TAG>/ directory has no unexpected variations.
#
# For the initial hw_tags for TK1s and TX1s we can use nice short tk1_32,
# tx1_64, and tx1_32 names, but if we update, say, perf version, we would
# need to add something like tk1_32-lt_5.4 (updating linux-tools to 5.4) or
# tx1_64-k_4.10 (updating kernel to 4.10).
#
# Bionic's linux-tools-4.18 version has proven to work well with TK1s' 3.10 and
# TX1s' 4.4 kernels.  We need to install it in all distro versionss so that we
# use same perf version to generate and process results.
RUN apt-get update \
 && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
# cpufrequtils is used by our benchmarking scripts, but we should update them to
# use cpupower from linux-tools everywhere instead.
 cpufrequtils \
 linux-tools-common \
 && cat /etc/apt/sources.list | sed -e "s/jammy/bionic/g" \
      > /etc/apt/sources.list.d/bionic.list \
# Import Bionic key
 && apt-key adv --recv-keys --keyserver keyserver.ubuntu.com 3B4FE6ACC0B21F32 \
 && apt-get update \
 && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
 linux-tools-4.18.0-13-generic \
 linux-tools-5.4.0-74-generic \
 linux-tools-5.4.0-80-generic \
 linux-tools-5.4.0-99-generic \
 && apt-get clean \
 && rm -rf \
 /etc/apt/sources.list.d/bionic.list \
 /var/lib/apt/lists/* \
 /tmp/* \
 /var/tmp/* \
 && ln -s /usr/lib/linux-tools/5.4.0-99-generic /usr/lib/linux-tools/fx_32 \
 && ln -s /usr/lib/linux-tools/5.4.0-99-generic /usr/lib/linux-tools/fx_64 \
 && ln -s /usr/lib/linux-tools/5.4.0-80-generic /usr/lib/linux-tools/apm_32 \
 && ln -s /usr/lib/linux-tools/5.4.0-80-generic /usr/lib/linux-tools/apm_64 \
 && ln -s /usr/lib/linux-tools/4.18.0-13-generic /usr/lib/linux-tools/tk1_32 \
 && ln -s /usr/lib/linux-tools/4.18.0-13-generic /usr/lib/linux-tools/tx1_32 \
 && ln -s /usr/lib/linux-tools/4.18.0-13-generic /usr/lib/linux-tools/tx1_64 \
 && ln -s /usr/lib/linux-tools/5.4.0-74-generic /usr/lib/linux-tools/sq_32 \
 && ln -s /usr/lib/linux-tools/5.4.0-74-generic /usr/lib/linux-tools/sq_64
COPY home-data/ /home-data/
COPY new-user.sh nvidia-power-cycle.sh nvidia-serial.sh /usr/local/bin/
RUN \
 while read line; do \
   new-user.sh --group $(echo "$line" | cut -d: -f 1,3); \
 done < <(grep -v ":x:x:" /home-data/group)
# Create directories required for X11.  We use X11 in tcwg-x2go images and,
# sometimes, in tcwg-dev images.
# We need to create these before "VOLUME /tmp" directive, since after
# the directive stuff from /tmp won't make it into the image.
RUN mkdir -p /tmp/.X11-unix /tmp/.ICE-unix \
 && chmod 1777 /tmp/.X11-unix /tmp/.ICE-unix
# For AArch32 images, add a warning if an interactive shell is opened in an
# AArch64 environment.
RUN echo $'if [ "$(uname -m)" == "aarch64" ] || [ "$(uname -m)" == "x86_64" ]; then\n' \
         $'  echo "============================================================================================="\n' \
         $'  echo "WARNING: This is a 32-bit container, but your shell is running in a 64-bit environment."\n' \
         $'  echo "You probably want to run your shell with the \'linux32\' program to get a 32-bit environment."\n' \
         $'  echo "============================================================================================="\n' \
         $'fi\n' \
         >> /etc/bash.bashrc
# We use ssh multiplexing, which creates sockets in /tmp.  Overlayfs,
# which docker is using, can't host sockets, so we use a scratch mount
# for /tmp.  This requires that we add --rm option to "docker run"
# invocations (e.g., mark "Remove volumes" checkbox in docker plugin) to
# cleanup host directories used for the scratch mounts.
VOLUME /tmp
EXPOSE 22
CMD ["linux32", "/usr/sbin/sshd", "-D"]
# This is a dummy comment to trigger a base image rebuild.
# checksum: 1548736e62fbf1e48a7e2df90f350e4a
